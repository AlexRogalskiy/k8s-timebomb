---
apiVersion: v1
kind: Namespace
metadata:
  name: awh
  labels:
    admission-webhook: enabled
---
apiVersion: v1
kind: Secret
metadata:
  name: awh-secret
  namespace: awh
  annotations:
    kubernetes.io/service-account.name: awh
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: awh
  namespace: awh
---
kind: ConfigMap
apiVersion: v1
metadata:
  namespace: awh
  name: awh
data:
  application.properties: |-
    # The format used for the keystore. It could be set to JKS in case it is a JKS file
    server.ssl.key-store-type=PKCS12
    # The path to the keystore containing the certificate 
    server.ssl.key-store=extra/ks.p12
    # The password used to generate the certificate
    server.ssl.key-store-password=abcabc
    # The alias mapped to the certificate
    server.ssl.key-alias=awh
    server.ssl.enabled=true
    server.port=8443
    logging.level.root=INFO
    spring.devtools.add-properties=true
    spring.devtools.livereload.enabled=true
    management.endpoint.health.probes.enabled=true
    kubeomatic-io.timebomb.admission.review.apiversion=admission.k8s.io/v1
    kubeomatic-io.timebomb.admission.review.kind=AdmissionReview
    kubeomatic-io.timebomb.admission.response.patch-type=JSONPatch
    kubeomatic-io.timebomb.schedule.interval.seconds=JSONPatch
    kubeomatic-io.timebomb.timer.default=1080
    kubeomatic-io.timebomb.label.timebomb=kubeomatic-io-timebomb
    kubeomatic-io.timebomb.annotation.valid=kubeomatic-io-timebomb-valid
    kubeomatic-io.timebomb.annotation.sku=kubeomatic-io-timebomb-sku
    kubeomatic-io.timebomb.annotation.description=kubeomatic-io-timebomb-description
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-delete-pods
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - persistentvolumeclaims
      - persistentvolumeclaims/status
      - pods
      - replicationcontrollers
      - replicationcontrollers/scale
      - serviceaccounts
      - services
      - services/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - bindings
      - events
      - limitranges
      - namespaces/status
      - pods/log
      - pods/status
      - replicationcontrollers/status
      - resourcequotas
      - resourcequotas/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - controllerrevisions
      - daemonsets
      - daemonsets/status
      - deployments
      - deployments/scale
      - deployments/status
      - replicasets
      - replicasets/scale
      - replicasets/status
      - statefulsets
      - statefulsets/scale
      - statefulsets/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
      - horizontalpodautoscalers/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - cronjobs/status
      - jobs
      - jobs/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - daemonsets/status
      - deployments
      - deployments/scale
      - deployments/status
      - ingresses
      - ingresses/status
      - networkpolicies
      - replicasets
      - replicasets/scale
      - replicasets/status
      - replicationcontrollers/scale
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
      - poddisruptionbudgets/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
      - ingresses/status
      - networkpolicies
    verbs:
      - get
      - list
      - watch
#  - apiGroups:
#    - ""
#    resources:
#    - pods
#    verbs:
#    - delete

#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: ClusterRoleBinding
#metadata:
#  name: awh-delete-pods
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: ClusterRole
#  name: cluster-delete-pods
#subjects:
#  - kind: ServiceAccount
#    name: awh
#    namespace: awh

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: awh-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
  - kind: ServiceAccount
    name: awh
    namespace: awh

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: awh
  namespace: awh
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: awh
  template:
    metadata:
      labels:
        app.kubernetes.io/name: awh
    spec:
      serviceAccountName: awh
      containers:
        - image: TEMPLATE_DEPLOY_IMAGE
          name: awh
          volumeMounts:
            - name: app-properties
              mountPath: /app/resources
          env:
            - name: ENV_SERVICE_HOST
              value: "10.96.0.1"
            - name: ENV_SERVICE_PORT
              value: "443"
          ports:
            - containerPort: 8443
              name: awh-web-svc
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 3
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 3
            periodSeconds: 10
      volumes:
        - name: app-properties
          configMap:
            name: awh

---
apiVersion: v1
kind: Service
metadata:
  name: awh-service
  namespace: awh
spec:
  selector:
    app.kubernetes.io/name: awh
  ports:
    - name: awh-port
      protocol: TCP
      port: 443
      targetPort: awh-web-svc
  type: ClusterIP
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: "awh-service.awh.svc.cluster.local"
webhooks:
  - name: "awh-service.awh.svc.cluster.local"
    admissionReviewVersions: [ "v1" ]
    sideEffects: None
    #    timeoutSeconds: 5
    failurePolicy: Ignore
    namespaceSelector:
      matchLabels:
        kubeomatic-io-timebomb: "enabled"
    rules:
      - apiGroups: ["*"]
        apiVersions: ["v1"]
        operations: ["CREATE"]
        resources: ["pods","deployments"]
        scope: "*"
    clientConfig:
      service:
        namespace: awh
        name: awh-service
        path: /api/validation
        port: 443
      caBundle: TEMPLATE_VALIDATINGWH_CAROOT
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: "awh-service.awh.svc.cluster.local"
webhooks:
  - name: "awh-service.awh.svc.cluster.local"
    admissionReviewVersions: [ "v1" ]
    sideEffects: None
    #    timeoutSeconds: 5
    reinvocationPolicy: Never
    failurePolicy: Ignore
    namespaceSelector:
      matchLabels:
        kubeomatic-io-timebomb: "enabled"
    rules:
      - apiGroups: ["*"]
        apiVersions: ["v1"]
        operations: ["CREATE"]
        resources: ["deployments"]
        scope: "*"
    clientConfig:
      service:
        namespace: awh
        name: awh-service
        path: /api/mutation
        port: 443
      caBundle: TEMPLATE_VALIDATINGWH_CAROOT